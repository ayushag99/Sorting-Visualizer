{"version":3,"sources":["Visulaizer/Component/Toolbar/Toolbar.module.css","Visulaizer/SortingVisualizer.module.css","assets/Play.svg","assets/Pause.svg","assets/LeftShift.svg","assets/RightShift.svg","Visulaizer/Component/Bars/Bars.module.css","Visulaizer/Component/Bars/ArrayBar/ArrayBar.module.css","Visulaizer/Component/Toolbar/Toolbar.js","Visulaizer/Component/Bars/ArrayBar/ArrayBar.js","Visulaizer/Component/Bars/Bars.js","Algorithms/SelectionSort/SelectionSort.js","Visulaizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Toolbar","className","styles","Controler","arrayGenerate","onClick","props","arrayGeneration","Controls","LeftShift","this","leftShift","src","alt","Play","toggleAnimation","animationPlayingStatus","Pause","RightShift","rightShift","selection","style","display","disabled","ProgressBar","ProgressCount","completedLength","type","min","max","totalLength","value","TotalLength","Component","ArrayBar","height","width","backgroundColor","mark","swap_mark","Bars","state","maxHeight","maxValue","window","innerHeight","maxwidth","innerWidth","array","length","Math","map","index","key","animation","marker","i","j","swap","selectionSort","animations","temp","push","arr","SortingVisualizer","animation_speed","componentDidMount","generateRandomArray","resetAnimationWithNewArray","setState","len","startRange","endRange","pauseAnimation","Array","from","floor","random","sortingHandler","animationHandler","clearInterval","animation_id","continueAnimation","setInterval","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.32d82d8c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar_Toolbar__2XLBu\",\"Controler\":\"Toolbar_Controler__1Nz8i\",\"Controls\":\"Toolbar_Controls__1y8r6\",\"ProgressBar\":\"Toolbar_ProgressBar__1soxP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SortingVisualizer\":\"SortingVisualizer_SortingVisualizer__3urjX\"};","module.exports = __webpack_public_path__ + \"static/media/Play.d0c0a044.svg\";","module.exports = __webpack_public_path__ + \"static/media/Pause.69377113.svg\";","module.exports = __webpack_public_path__ + \"static/media/LeftShift.ed3cf220.svg\";","module.exports = __webpack_public_path__ + \"static/media/RightShift.0ddd6ca6.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Bars\":\"Bars_Bars__1yBpV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ArrayBar\":\"ArrayBar_ArrayBar__uGhJl\"};","import React, { Component } from \"react\";\n\nimport styles from \"./Toolbar.module.css\";\n\n// Importing Button\nimport Play from \"../../../assets/Play.svg\";\nimport Pause from \"../../../assets/Pause.svg\";\nimport LeftShift from \"../../../assets/LeftShift.svg\";\nimport RightShift from \"../../../assets/RightShift.svg\";\n\nclass Toolbar extends Component {\n  render() {\n    return (\n      <div className={styles.Toolbar}>\n        <div className={styles.Controler}>\n          <div className={styles.arrayGenerate}>\n            <button onClick={() => this.props.arrayGeneration(50, 5, 1000)}>\n              Generate Array\n            </button>\n          </div>\n\n          <div className={styles.Controls}>\n            <div className={styles.LeftShift}>\n              <img onClick={this.props.leftShift} src={LeftShift} alt=\"\" />\n            </div>\n            <div className={styles.Play}>\n              <img\n                onClick={this.props.toggleAnimation}\n                src={this.props.animationPlayingStatus ? Pause : Play}\n                alt=\"\"\n              />\n            </div>\n            <div className={styles.RightShift}>\n              <img onClick={this.props.rightShift} src={RightShift} alt=\"\" />\n            </div>\n          </div>\n\n          <div>\n            <button onClick={this.props.selection} style={{display:'none'}}disabled>Selection Sort</button>\n          </div>\n        </div>\n\n        <div className={styles.ProgressBar}>\n        <span className={styles.ProgressCount}>{this.props.completedLength}</span>\n        <input\n        type=\"range\"\n        min=\"0\"\n        max={this.props.totalLength}\n        value={this.props.completedLength}\n        />\n        <span className={styles.TotalLength}>{this.props.totalLength}</span>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default Toolbar;\n","import React from 'react'\n\nimport styles from './ArrayBar.module.css'\n\nconst ArrayBar=(props)=> (\n    <div className={styles.ArrayBar} style={{height:props.height , width: props.width , backgroundColor:props.mark? props.swap_mark?'Blue':'red'   : '#2e2e2e'}}></div>\n)\nexport default ArrayBar;","import React, { Component } from \"react\";\n\nimport styles from \"./Bars.module.css\";\n\n// Imorting Component\nimport ArrayBar from \"./ArrayBar/ArrayBar\";\n\nclass Bars extends Component {\n  state = {\n    maxHeight: 0,\n    maxValue: 0,\n  };\n\n  render() {\n    let maxHeight = window.innerHeight * 0.8 * 0.98;\n    let maxwidth = (window.innerWidth * 0.8) / this.props.array.length;\n    let maxValue = Math.max(...this.props.array);\n    // console.log(maxwidth)\n    return (\n      <div className={styles.Bars}>\n        {this.props.array.map((value, index) => (\n          <ArrayBar\n            key={index}\n            width={maxwidth}\n            height={(value / maxValue) * maxHeight}\n            mark= {this.props.animation.marker.i === index || this.props.animation.marker.j === index ? true : false}\n            swap_mark = {this.props.animation.swap}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Bars;\n","// selection Sort\nconst selectionSort=(array)=>{\n    let animations = []\n    // Structure = {i:index_1 , j:index_2 . swap:true/false}\n    for(let i=0; i<array.length;i++){\n        for (let j= i+1; j<array.length;j++){\n            if (array[i]>array[j]){\n                let temp = array[i]\n                array[i] = array[j]\n                array[j] = temp\n                animations.push({i,j,swap:true , arr:[...array]})\n            }else{\n                animations.push({i,j,swap:false , arr:[...array]})\n            }\n        }\n    }\n    return animations\n}\nexport default selectionSort","import React, { Component } from \"react\";\n\n// Importing Styles\nimport styles from \"./SortingVisualizer.module.css\";\n\n// Importing Components\nimport Toolbar from \"./Component/Toolbar/Toolbar\";\nimport Bars from \"./Component/Bars/Bars\";\n\n// Importing Algorithm Handler\nimport selectionSort from \"../Algorithms/SelectionSort/SelectionSort\";\n\nclass SortingVisualizer extends Component {\n  animation_speed = 10;\n  animations = [];\n  index = 0;\n\n  state = {\n    array: [],\n    animationPlayingStatus: false,\n    animation: {\n      marker: { i: null, j: null },\n      swap: null,\n    },\n  };\n\n  //   @desc\n  // HERE: Lifecycle Management\n  componentDidMount = () => {\n    this.generateRandomArray();\n  };\n\n  //   @desc\n  //   HERE: Methods\n  resetAnimationWithNewArray = (array) => {\n    this.setState({\n      array: array,\n      animationPlayingStatus: false,\n      animation: {\n        marker: { i: null, j: null },\n        swap: null,\n      },\n    });\n    this.index = 0;\n    this.animations=[]\n  };\n\n  //   @desc\n  //   HERE: Generate Radom Array\n  generateRandomArray = (len = 20, startRange = 5, endRange = 50) => {\n    //   Generating random array\n    this.pauseAnimation()\n    let array = Array.from({ length: len }, () =>\n      Math.floor(Math.random() * (endRange - startRange + 1) + startRange)\n    );\n    this.resetAnimationWithNewArray(array);\n  };\n\n  // @desc\n  // HERE: Algorithm Handler\n  sortingHandler = () => {\n    //   TODO: Will need a correction--such that algorithm can be dynamically selected\n    this.animations = selectionSort(this.state.array);\n    this.animations.push({i:null,j:null,swap:null , arr:[...this.animations[this.animations.length -1].arr]})\n    this.index = 0;\n  };\n\n  // @desc\n  // HERE: Animation Handler\n  animationHandler = (animations) => {\n    if (animations.length === this.index) {\n      this.pauseAnimation();\n      this.index-=1\n    //   this.setState({\n    //     animation: { marker: { i: null, j: null }, swap: null },\n    //   });\n      return;\n    }\n    this.setState({\n      array: animations[this.index].arr,\n      animation: {\n        marker: { i: animations[this.index].i, j: animations[this.index].j },\n        swap: animations[this.index].swap,\n      },\n    });\n  };\n\n  pauseAnimation = () => {\n    this.setState({ animationPlayingStatus: false });\n    clearInterval(this.animation_id);\n  };\n\n  continueAnimation = () => {\n      if (this.animations == false){\n        //   TODO: Needs an alteration that the by default algo is preset\n        this.sortingHandler()\n      }\n    this.setState({ animationPlayingStatus: true });\n    this.animation_id = setInterval(() => {\n      this.animationHandler(this.animations);\n      this.index += 1;\n    }, this.animation_speed);\n\n  };\n\n  toggleAnimation = () => {\n    if (this.state.animationPlayingStatus) {\n      this.pauseAnimation();\n    } else {\n      this.continueAnimation();\n    }\n  };\n\n  leftShift = () => {\n    this.pauseAnimation();\n    this.animationHandler(this.animations);\n    this.index -= 1;\n  };\n  rightShift = () => {\n    this.pauseAnimation();\n    this.animationHandler(this.animations);\n    this.index += 1;\n  };\n\n\n  // @desc\n  // HERE: Render Function\n  render() {\n    return (\n      <div className={styles.SortingVisualizer}>\n        <Bars array={this.state.array} animation={this.state.animation} />\n\n        <Toolbar\n          arrayGeneration={this.generateRandomArray}\n          array={this.state.array}\n          animationPlayingStatus={this.state.animationPlayingStatus}\n          toggleAnimation={this.toggleAnimation}\n          selection={() => this.sortingHandler([...this.state.array])}\n          leftShift={this.leftShift}\n          rightShift={this.rightShift}\n          totalLength={this.animations.length}\n          completedLength={this.index}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SortingVisualizer;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport SortingVisualizer from \"./Visulaizer/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <SortingVisualizer className=\"window\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}